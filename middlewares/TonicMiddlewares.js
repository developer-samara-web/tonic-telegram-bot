//? MIDDLEWARES | TONIC

//* Requires
const { LOG, GroupByDate, CalculateStatistics, FilterKeyword, FilterStats } = require('@helpers/base')
const { Create, Keywords, GetKeywords, Callback, GetCallback, Pixel, Status, Statistics, List } = require('@services/tonic')
const { StatusMessage, StatisticsMessage, KeywordMessage, CreateMessage, CompanyMessage } = require('@messages/TonicMessages')
const { GetUserSheet } = require('@services/firebase')
const { LoadSheet, SearchSheet } = require('@services/sheet')


//* START
const CreateMiddleware = async (ctx, { name, offer, country, keywords, domain, pixel, token, target, event, tonicDomain }) => {
    const username = ctx.message?.from?.username || ctx.callbackQuery?.from?.username || 'BOT'

    const status = {
        create: false,
        keyword: false,
        callback: false,
        pixel: false,
    }

    try {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç (StageCreate)
        const StageCreate = await Create(ctx, encodeURIComponent(name), encodeURIComponent(offer), country, tonicDomain, target)
        
        if (StageCreate === 'Success') {
            status.create = 'üî∏ –°–æ–∑–¥–∞—ë—Ç—Å—è'

            // –ò—â–µ–º ID –æ–±—ä–µ–∫—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ –∏–º–µ–Ω–µ–º (StageId)
            const StageId = await SearchMiddleware(ctx, 'pending', name, target)

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã (StageKeyword)
            if (keywords) {
                const StageKeyword = await Keywords(ctx, Number(StageId[0].id), keywords, target)
                status.keyword = StageKeyword.KeywordSetId ? true : false
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥–æ–º–µ–Ω (StageCallback)
            if (domain) {
                const StageCallback = await Callback(ctx, Number(StageId[0].id), domain, target)
                status.callback = StageCallback
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∏–∫—Å–µ–ª—å, –µ—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ Facebook (StagePixel)
            if (target !== 'facebook') {
                const StagePixel = await Pixel(ctx, Number(StageId[0].id), pixel, token, event, target)
                status.pixel = StagePixel.success ? true : false
            }

            // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            LOG(username, 'Middlewares/Tonic/CreateMiddleware')
            return status

        } else {
            switch (StageCreate){
                case 'Invalid TLD, allowed are: bond':
                    status.create = '–ù–∞ –Ω–∞–π–¥–µ–Ω .bond –≤ –¥–æ–º–µ–Ω–µ.'
                    break
                case 'The campaign name is already in use please choose another one':
                    status.create = '–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'
                    break
                case 'Forbidden characters in domain name':
                    status.create = '–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –¥–æ–º–µ–Ω–µ.'
                    break
                default:
                    status.create = StageCreate
                    break
            }
            return status
        }
    } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        LOG(username, 'Middlewares/Tonic/CreateMiddleware', error, ctx)
        return false
    }
}
//* END


//* START
const StatusMiddleware = async (ctx, name) => {
    const username = ctx.message?.from?.username || ctx.callbackQuery?.from?.username || 'BOT'
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const sheet_id = await GetUserSheet(ctx)
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏
        const sheet_str = await SearchSheet(ctx, sheet_id, name)

        if(sheet_str){
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            const account = sheet_str._rawData[1]
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            const response = await Status(ctx, name, account)
            // –ò—â–µ–º –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç—É—Å—É, –∏–º–µ–Ω–∏ –∏ –∞–∫–∫–∞—É–Ω—Ç—É
            const item = await SearchMiddleware(ctx, response.status, name, account)
            // –ü–æ–ª—É—á–∞–µ–º callback –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            const callback = await GetCallback(ctx, item[0].id, account)
            // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            const keywords = await GetKeywords(ctx, item[0].id, account)

            // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            LOG(username, 'Middlewares/Tonic/StatusMiddleware')
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
            return await StatusMessage(ctx, { status: response.status, ...item }, keywords, callback)
        } else {
            return false
        }
    } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        LOG(username, 'Middlewares/Tonic/StatusMiddleware', error, ctx)
    }
}
//* END


//* START
const StatisticsMiddleware = async (ctx, { date, source }) => {
    const username = ctx.message?.from?.username || ctx.callbackQuery?.from?.username || 'BOT'
    try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        const response = await Statistics(ctx, date)

        // –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const sheet_id = await GetUserSheet(ctx)
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const sheet = await LoadSheet(ctx, sheet_id)

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        const compains = sheet.map(row => row._rawData[2])

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∏ –∫–∞–º–ø–∞–Ω–∏—è–º
        const filter = FilterStats(response, source, compains)

        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        LOG(username, 'Middlewares/Tonic/StatisticsMiddleware')
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        return await StatisticsMessage(ctx, filter)
    } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        LOG(username, 'Middlewares/Tonic/StatisticsMiddleware', error, ctx)
    }
}
//* END


//* START
const KeywordsMiddleware = async (ctx, { date, company_name }) => {
    const username = ctx.message?.from?.username || ctx.callbackQuery?.from?.username || 'BOT'
    try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        const response = await Statistics(ctx, date)
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
        const filter = FilterKeyword(response, company_name)

        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        LOG(username, 'Middlewares/Tonic/StatsKeywordsMiddleware')
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if(filter.length) {
            return await KeywordMessage(ctx, filter)
        } else {
            return false
        }
    } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        LOG(username, 'Middlewares/Tonic/StatsKeywordsMiddleware', error, ctx)
    }
}
//* END


//* START
const CompanyMiddleware = async (ctx, { company_name, date }) => {
    const username = ctx.message?.from?.username || ctx.callbackQuery?.from?.username || 'BOT'
    try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        const response = await Statistics(ctx, date)
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
        const filter = response.filter(obj => obj.campaign_name === company_name)
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞—Ç–∞–º
        const grouped = GroupByDate(filter, company_name)
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const overall = CalculateStatistics(grouped, company_name)

        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        LOG(username, 'Middlewares/Tonic/CompanyMiddleware')
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –¥–∞—Ç–∞–º
        return await CompanyMessage(ctx, {
            overall: overall,
            byDate: Object.values(grouped)
        })
    } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        LOG(username, 'Middlewares/Tonic/CompanyMiddleware', error, ctx)
    }
}
//* END


//* START
const SearchMiddleware = async (ctx, status, name, account) => {
    const username = ctx.message?.from?.username || ctx.callbackQuery?.from?.username || 'BOT'
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–º
        const list = await List(ctx, status, account)

        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        LOG(username, 'Middlewares/Tonic/SearchMiddleware')
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return list.filter(obj => obj.name === name)
    } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        LOG(username, 'Middlewares/Tonic/SearchMiddleware', error, ctx)
    }
}
//* END


//* START
const SetPixelMiddleware = async (ctx, { name, pixel, token, event }) => {
    const username = ctx.message?.from?.username || ctx.callbackQuery?.from?.username || 'BOT'
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
        const sheet_id = await GetUserSheet(ctx)
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ –∏–º–µ–Ω–∏
        const sheet_str = await SearchSheet(ctx, sheet_id, name)
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        const account = sheet_str._rawData[1]
        // –ò—â–µ–º –æ–±—ä–µ–∫—Ç –ø–æ –∏–º–µ–Ω–∏ –∏ –∞–∫–∫–∞—É–Ω—Ç—É
        const [{ id }] = await SearchMiddleware(ctx, null, name, account)

        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        LOG(username, 'Middlewares/Tonic/SetPixelMiddleware')
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏–∫—Å–µ–ª—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return await Pixel(ctx, Number(id), pixel, token, event, account)
    } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        LOG(username, 'Middlewares/Tonic/SetPixelMiddleware', error, ctx)
    }
}
//* END


//* START
const SetCallbackMiddleware = async (ctx, { name, domain }) => {
    const username = ctx.message?.from?.username || ctx.callbackQuery?.from?.username || 'BOT'
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
        const sheet_id = await GetUserSheet(ctx)
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ –∏–º–µ–Ω–∏
        const sheet_str = await SearchSheet(ctx, sheet_id, name)
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        const account = sheet_str._rawData[1]
        // –ò—â–µ–º –æ–±—ä–µ–∫—Ç –ø–æ –∏–º–µ–Ω–∏ –∏ –∞–∫–∫–∞—É–Ω—Ç—É
        const [{ id }] = await SearchMiddleware(ctx, null, name, account)

        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        LOG(username, 'Middlewares/Tonic/SetCallbackMiddleware')
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return await Callback(ctx, Number(id), domain, account)
    } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        LOG(username, 'Middlewares/Tonic/SetCallbackMiddleware', error, ctx)
    }
}
//* END


//* START
const SetKeywordsMiddleware = async (ctx, { name, keywords }) => {
    const username = ctx.message?.from?.username || ctx.callbackQuery?.from?.username || 'BOT'
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
        const sheet_id = await GetUserSheet(ctx)
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ –∏–º–µ–Ω–∏
        const sheet_str = await SearchSheet(ctx, sheet_id, name)
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        const account = sheet_str._rawData[1]
        // –ò—â–µ–º –æ–±—ä–µ–∫—Ç –ø–æ –∏–º–µ–Ω–∏ –∏ –∞–∫–∫–∞—É–Ω—Ç—É
        const [{ id }] = await SearchMiddleware(ctx, null, name, account)

        const country = name.split('_')

        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        LOG(username, 'Middlewares/Tonic/SetKeywordsMiddleware')
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const result = await Keywords(ctx, Number(id), keywords ? keywords : null, account, country[1])

        // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        if (Array.isArray(result) && result.length > 0 && typeof result[0] === 'string') {
            throw new Error(result[0]) // –õ–æ–≤–∏–º –ø–µ—Ä–≤—É—é –æ—à–∏–±–∫—É
        }

        return result
    } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —è–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É
        LOG(username, 'Middlewares/Tonic/SetKeywordsMiddleware', error.message, ctx)
        return { error: error.message } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ –æ–±—ä–µ–∫—Ç
    }
}
//* END


module.exports = {
    StatusMiddleware,
    StatisticsMiddleware,
    KeywordsMiddleware,
    CompanyMiddleware,
    CreateMiddleware,
    SetPixelMiddleware,
    SetCallbackMiddleware,
    SetKeywordsMiddleware
}