//? ACTIONS | PERMISSIONS

//* Requires
const { LOG } = require('@helpers/base')
const { Markup } = require('telegraf')
const { GrantAccess, GrantAdminAccess } = require('@helpers/users')


//* START - PermissionsAction | –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—ã–¥–∞—á—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
const PermissionsAction = async (ctx) => {
    const username = ctx.message?.from?.username || ctx.callbackQuery?.from?.username || 'BOT';
    try {
        const { action, id, user } = JSON.parse(ctx.callbackQuery.data);
        const { message_id } = ctx.callbackQuery.message

        if (action === 'grant_access') {
            GrantAccess(ctx, id, user);
            await ctx.deleteMessage(message_id);
            await ctx.telegram.sendMessage(id, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω.', Markup.keyboard([
                ['üîπ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'],
            ]).resize().oneTime());

            LOG(username, 'Permissions/PermissionsAction');
        } else if (action === 'deny_access') {
            await ctx.deleteMessage(message_id);
            await ctx.telegram.sendMessage(id, 'üö´ –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.');
            LOG(username, 'Permissions/PermissionsAction', '–û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ.');
        }
    } catch (error) {
        LOG(username, 'Helpers/Permissions/PermissionsAction', error);
    }
}
//* END - PermissionsAction


//* START - PermissionsAdminAction | –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—ã–¥–∞—á—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const PermissionsAdminAction = async (ctx) => {
    const username = ctx.message?.from?.username || ctx.callbackQuery?.from?.username || 'BOT';
    try {
        const { action, id, user } = JSON.parse(ctx.callbackQuery.data);
        const { message_id } = ctx.callbackQuery.message

        if (action === 'grant_admin_access') {
            GrantAdminAccess(ctx, id, user);
            await ctx.deleteMessage(message_id);
            await ctx.telegram.sendMessage(id, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∞ –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω.', Markup.keyboard([
                ['üîπ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'],
            ]).resize().oneTime());

            LOG(username, 'Permissions/PermissionsAdminAction');
        } else if (action === 'deny_admin_access') {
            await ctx.deleteMessage(message_id);
            await ctx.telegram.sendMessage(id, 'üö´ –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∞–¥–º–∏–Ω–∞.');
            LOG(username, 'Permissions/PermissionsAdminAction', '–û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ.');
        }
    } catch (error) {
        LOG(username, 'Helpers/Permissions/PermissionsAdminAction', error);
    }
}
//* END - PermissionsAdminAction


module.exports = { PermissionsAction, PermissionsAdminAction }