//? ACTIONS | MONITORING

//* Requires
const { LOG } = require('@helpers/base')
const { SearchSheet, SaveSheet } = require('@services/sheet')
const { GetFirebaseUser, DeleteMonitoringItem, GetMonitoringList, UpdateMonitoringItem } = require('@services/firebase')
const { MonitoringDeleteMessage, MonitoringRefreshMessage, MonitoringEndMessage } = require('@messages/MonitoringMessages')
const { CreateMiddleware } = require('@middlewares/TonicMiddlewares')
const { Status } = require('@services/tonic')


//* START
const MonitoringAction = async (ctx) => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const { username, id } = ctx.update.callback_query.from
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Firebase
    const { sheet } = await GetFirebaseUser(ctx, id)
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_query
    const { data } = ctx.update.callback_query
    // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    const sheet_data = await SearchSheet(ctx, sheet, null, process.env.MONITORING_STATUS)

    try {
        switch (data) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            case 'create_monitoring':
                {
                    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const items = await GetMonitoringList(ctx, id)
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π
                    ctx.answerCbQuery('‚ôªÔ∏è –°–æ–∑–¥–∞—é –∫–æ–º–ø–∞–Ω–∏–∏...')
                    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
                    for (const item of items) {
                        await CreateMiddleware(ctx, item, 'monitoring')
                        await UpdateMonitoringItem(ctx, item.name, 'üî∏ –°–æ–∑–¥–∞—ë—Ç—Å—è')

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
                        const message = await GetMonitoringList(ctx, id)
                        await MonitoringRefreshMessage(ctx, message, sheet)
                    }
                }
                break

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            case 'delete_monitoring':
                {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞
                    const items = sheet_data.map(item => item._rawData[2])
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π
                    ctx.answerCbQuery('‚ôªÔ∏è –£–¥–∞–ª—è—é –∫–æ–º–ø–∞–Ω–∏–∏...')
                    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
                    for (const item of items) {
                        await DeleteMonitoringItem(ctx, item)
                    }
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
                    const message = await GetMonitoringList(ctx, id)
                    await MonitoringDeleteMessage(ctx, message)
                }
                break

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            case 'clear_monitoring':
                {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞
                    const items = await GetMonitoringList(ctx, id)
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π
                    ctx.answerCbQuery('‚ôªÔ∏è –î–µ–ª–∞—é –æ—Ç—á–∏—Å—Ç–∫—É...')
                    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
                    for (const item of items) {
                        await DeleteMonitoringItem(ctx, item.name)
                    }
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
                    const message = await GetMonitoringList(ctx, id)
                    await MonitoringDeleteMessage(ctx, message)
                }
                break

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            default:
                {
                    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const items = await GetMonitoringList(ctx, id)
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π
                    await ctx.answerCbQuery('‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é –∫–æ–º–ø–∞–Ω–∏–∏...')

                    let allLinksUpdated = true

                    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
                    for (const item of items) {
                        const monitoringStatus = item.status
                        const company = await Status(ctx, encodeURIComponent(item.name), item.target)

                        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è
                        if (company.status === 'active' && monitoringStatus === 'üî∏ –°–æ–∑–¥–∞—ë—Ç—Å—è') {
                            const link = `https://${company['0'].link}`
                            const offerName = encodeURIComponent(item.offer)

                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                            await SaveSheet(ctx, item.sheet, item.name, { type: 'href', data: link }, offerName)
                            await UpdateMonitoringItem(ctx, item.name, '‚úÖ –°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞')

                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
                            const message = await GetMonitoringList(ctx, id)
                            await MonitoringRefreshMessage(ctx, message, sheet)

                        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º—É
                        } else if (monitoringStatus !== '‚úÖ –°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞') {
                            allLinksUpdated = false
                        }
                    }

                    // –ï—Å–ª–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if (allLinksUpdated) {
                        const message = await GetMonitoringList(ctx, id)
                        await MonitoringEndMessage(ctx, message, sheet)
                    }
                }
                break
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        LOG(username, 'Actions/MonitoringAction')
    } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –≤–æ–∑–Ω–∏–∫–ª–∏
        LOG(username, 'Actions/MonitoringAction', error, ctx)
    }
}
//* END


module.exports = { MonitoringAction }