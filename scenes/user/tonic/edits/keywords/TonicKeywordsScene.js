//? SCENES | TONICKEYWORDS

//* Require
const { LOG } = require('@helpers/base')
const { Scenes, Composer } = require('telegraf')
const { SetKeywordsMiddleware } = require('@middlewares/TonicMiddlewares')


//* START
const stageName = new Composer()
stageName.on('text', async (ctx) => {
    const { username } = ctx.message.from

    try {
        ctx.wizard.state.data = {}
        await ctx.replyWithHTML('<b>‚ôªÔ∏è –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–µ–π –ø—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ —ç—Ç–∞–ø—ã.</b>\n\n1Ô∏è‚É£ <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏:</b>')

        LOG(username, 'Scenes/User/Tonic/Edits/Keywords/TonicKeywordsScene/StageName')
        return ctx.wizard.next()
    } catch (error) {
        LOG(username, 'Scenes/User/Tonic/Edits/Keywords/TonicKeywordsScene/StageName', error, ctx)
        return ctx.scene.leave()
    }
})
//* END


//* START
const stageKeywords = new Composer()
stageKeywords.on('text', async (ctx) => {
    const { data } = ctx.wizard.state
    const { username } = ctx.message.from

    try {
        data.name = ctx.message.text
        await ctx.replyWithHTML('2Ô∏è‚É£ <b>–£–∫–∞–∂–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –∫–ª—é—á–∏:</b>')

        LOG(username, 'Scenes/User/Tonic/Edits/Keywords/TonicKeywordsScene/StageKeywords')
        return ctx.wizard.next()
    } catch (error) {
        LOG(username, 'Scenes/User/Tonic/Edits/Keywords/TonicKeywordsScene/StageKeywords', error, ctx)
        return ctx.scene.leave()
    }
})
//* END


//* START
const stageResult = new Composer()
stageResult.on('message', async (ctx) => {
    const { data } = ctx.wizard.state
    const { username } = ctx.message.from

    try {
        data.keywords = ctx.message.text.split('\n')
        const { message_id } = await ctx.replyWithHTML(`‚ôªÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–ª—é—á–∏...`)
        const message = await SetKeywordsMiddleware(ctx, data)
        await ctx.deleteMessage(message_id);

        if (message) {
            await ctx.replyWithHTML(`‚úÖ <b>–ö–ª—é—á–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.</b>`)
        } else {
            await ctx.replyWithHTML(`üö´ <b>–ö–ª—é—á–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.</b>`)
        }

        LOG(username, 'Scenes/User/Tonic/Edits/Keywords/TonicKeywordsScene/StageResult')
        return ctx.scene.leave()
    } catch (error) {
        LOG(username, 'Scenes/User/Tonic/Edits/Keywords/TonicKeywordsScene/StageResult', error, ctx)
        return ctx.scene.leave()
    } finally {
        return ctx.scene.enter('tonic-edits')
    }
})
//* END


const TonicSetKeywordsScene = new Scenes.WizardScene('TonicSetKeywordsWizard', stageName, stageKeywords, stageResult)
module.exports = TonicSetKeywordsScene