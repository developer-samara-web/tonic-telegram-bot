//? SCENES | TONICCOMPANY

//* Requires
const { LOG } = require('@helpers/base')
const { Scenes, Composer, Markup } = require('telegraf')
const { CompanyMiddleware } = require('@middlewares/TonicMiddlewares')


//* START - StageName
const stageName = new Composer()
stageName.on('text', async (ctx) => {
    const { username } = ctx.message.from

    try {
        ctx.wizard.state.data = {}
        await ctx.replyWithHTML('<b>‚ôªÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ —ç—Ç–∞–ø—ã.</b>\n\n1Ô∏è‚É£ <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:</b>')

        LOG(username, 'Scenes/User/Tonic/Statistics/Company/TonicCompanyScene/StageName')
        return ctx.wizard.next()
    } catch (error) {
        LOG(username, 'Scenes/User/Tonic/Statistics/Company/TonicCompanyScene/StageName', error)
        return ctx.scene.leave()
    }
})
//* END - StageName


//* START - StageData
const stageData = new Composer()
stageData.on('text', async (ctx) => {
    const { data } = ctx.wizard.state
    const { username } = ctx.message.from

    try {
        data.company_name = ctx.message.text
        await ctx.replyWithHTML('2Ô∏è‚É£ <b>–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n( –ü—Ä–∏–º–µ—Ä: 2024-04-01:2024-05-01 )',
            Markup.keyboard([
                ['–°–µ–≥–æ–¥–Ω—è', '–í—á–µ—Ä–∞', '–ó–∞ 3 –¥–Ω—è'],
                ['–ó–∞ –Ω–µ–¥–µ–ª—é', '–ó–∞ –º–µ—Å—è—Ü']
            ]).resize().oneTime())

        LOG(username, 'Scenes/User/Tonic/Statistics/Company/TonicCompanyScene/StageData')
        return ctx.wizard.next()
    } catch (error) {
        LOG(username, 'Scenes/User/Tonic/Statistics/Company/TonicCompanyScene/StageData', error)
        return ctx.scene.leave()
    }
})
//* END - StageData


//* START - StageResult
const stageResult = new Composer()
stageResult.on('message', async (ctx) => {
    const { data } = ctx.wizard.state
    const { username } = ctx.message.from

    try {
        data.date = ctx.message.text
        const { message_id } = await ctx.replyWithHTML(`‚ôªÔ∏è <b>–ò–¥—ë—Ç –ø–æ–∏—Å–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</b>`)
        const message = await CompanyMiddleware(ctx, data)
        await ctx.deleteMessage(message_id);

        if (message) {
            await ctx.replyWithHTML(message)
        } else {
            await ctx.replyWithHTML(`üö´ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>`)
        }

        LOG(username, 'Scenes/User/Tonic/Statistics/Company/TonicCompanyScene/StageResult')
        return ctx.scene.leave()
    } catch (error) {
        LOG(username, 'Scenes/User/Tonic/Statistics/Company/TonicCompanyScene/StageResult', error)
        return ctx.scene.leave()
    } finally {
        return ctx.scene.enter('tonic-stats')
    }
})
//* END - StageResult


const TonicCompanyScene = new Scenes.WizardScene('TonicCompanyWizard', stageName, stageData, stageResult)
module.exports = TonicCompanyScene