//? ACTIONS | MONITORING

//* Requires
const { LOG } = require('@helpers/base')
const { SearchSheet, SaveSheet } = require('@services/sheet')
const { GetFirebaseUser, DeleteMonitoringItem, GetMonitoringList, UpdateMonitoringItem } = require('@services/firebase')
const { MonitoringDeleteMessage, MonitoringRefreshMessage, MonitoringEndMessage } = require('@messages/MonitoringMessages')
const { UpdateMonitoringItemMiddleware } = require('@middlewares/MonitoringMiddlewares')
const { CreateMiddleware } = require('@middlewares/TonicMiddlewares')
const { Status } = require('@services/tonic')


//* START
const MonitoringAction = async (ctx) => {
    const { username, id } = ctx.update.callback_query.from
    const { sheet } = await GetFirebaseUser(ctx, id)
    const { data } = ctx.update.callback_query

    try {
        switch (data) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            case 'create_monitoring': {
                ctx.answerCbQuery('‚ôªÔ∏è –°–æ–∑–¥–∞—é –∫–æ–º–ø–∞–Ω–∏–∏...')
                const items = await GetMonitoringList(ctx, id)

                for (const item of items) {
                    const status = await CreateMiddleware(ctx, item)
                    await UpdateMonitoringItem(ctx, item.name, status)

                    const message = await GetMonitoringList(ctx, id)
                    await MonitoringRefreshMessage(ctx, message, sheet)
                }
                break
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            case 'clear_monitoring': {
                ctx.answerCbQuery('‚ôªÔ∏è –£–¥–∞–ª—è—é –∫–æ–º–ø–∞–Ω–∏–∏...')
                const sheet_data = await SearchSheet(ctx, sheet, null, 'Cloudflare')
                const items = sheet_data.map(item => item._rawData[2])

                for (const item of items) {
                    await DeleteMonitoringItem(ctx, item)
                }

                const message = await GetMonitoringList(ctx, id)
                await MonitoringDeleteMessage(ctx, message)
                break
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            default: {
                ctx.answerCbQuery('‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é –∫–æ–º–ø–∞–Ω–∏–∏...')
                const items = await GetMonitoringList(ctx, id)

                let allLinksUpdated = true  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ true

                for (const item of items) {
                    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ
                    if (item.status !== 'üî∏ –°–æ–∑–¥–∞—ë—Ç—Å—è' && item.status !== '‚úÖ –°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞') {
                        await UpdateMonitoringItemMiddleware(ctx, item.name)
                        const status = await CreateMiddleware(ctx, item)
                        await UpdateMonitoringItem(ctx, item.name, status)
                        const message = await GetMonitoringList(ctx, id)
                        await MonitoringRefreshMessage(ctx, message, sheet)

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤—Å—ë –µ—â—ë –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
                        if (status !== '‚úÖ –°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞') {
                            allLinksUpdated = false;  // –ù–µ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–∞–Ω–∏–∏
                    if (item.status === 'üî∏ –°–æ–∑–¥–∞—ë—Ç—Å—è' || item.status === '‚úÖ –°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞') {
                        const company = await Status(ctx, encodeURIComponent(item.name), item.target)

                        if (company.status === 'active' && item.status === 'üî∏ –°–æ–∑–¥–∞—ë—Ç—Å—è') {
                            const link = `https://${company['0'].link}`
                            const offerName = encodeURIComponent(item.offer)

                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                            await SaveSheet(ctx, item.sheet, item.name, { type: 'href', data: link }, offerName)
                            await UpdateMonitoringItem(ctx, item.name, '‚úÖ –°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞', link)

                            const message = await GetMonitoringList(ctx, id)
                            await MonitoringRefreshMessage(ctx, message, sheet)
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤—Å—ë –µ—â—ë –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
                        if (item.status !== '‚úÖ –°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞') {
                            allLinksUpdated = false
                        }
                    }
                }

                // –ï—Å–ª–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if (allLinksUpdated) {
                    const message = await GetMonitoringList(ctx, id)
                    await MonitoringEndMessage(ctx, message, sheet)
                }
            }
        }

        LOG(username, 'Actions/MonitoringAction')
    } catch (error) {
        LOG(username, 'Actions/MonitoringAction', error, ctx)
    }
}
//* END


module.exports = { MonitoringAction }