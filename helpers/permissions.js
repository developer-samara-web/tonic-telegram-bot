//Require
const { Bot } = require('@config/telegram')
const { LOG } = require('@helpers/helpers')
const { HasAccess, GrantAccess } = require('@helpers/users');
const { Markup } = require('telegraf')

//Permissions
const Permissions = async (ctx, scene) => {
    const { username } = ctx.message.from
    try {
        const userId = ctx.from.id;

        if (HasAccess(ctx, userId)) {
            ctx.scene.enter(scene)
        } else {
            await ctx.replyWithHTML('‚ö†Ô∏è <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!</b>\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø"</b>. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–¥–Ω–∏—è –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.',
                Markup.keyboard([
                    ['üî∏ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø']
                ])
                    .oneTime()
                    .resize()
            )
        }

        LOG(username, 'Helpers/Permissions/Permissions')
    } catch (error) {
        LOG(username, 'Helpers/Permissions/Permissions', error)
    }
}

//Permissions Admin
const PermissionsAdmin = async (ctx, scene) => {
    const { username } = ctx.message.from
    try {
        const userId = ctx.from.id;

        if (HasAdminAccess(ctx, userId)) {
            ctx.scene.enter(scene)
        } else {
            await ctx.replyWithHTML('‚ö†Ô∏è <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!</b>\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø"</b>. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–¥–Ω–∏—è –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.',
                Markup.keyboard([
                    ['üî∏ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø']
                ])
                    .oneTime()
                    .resize()
            )
        }

        LOG(username, 'Helpers/Permissions/PermissionsAdmin')
    } catch (error) {
        LOG(username, 'Helpers/Permissions/PermissionsAdmin', error)
    }
}

//PermissionsAccess
const PermissionsAccess = async (ctx) => {
    const { username } = ctx.message.from
    try {
        const userId = ctx.from.id;

        const grant = { action: 'grant_access', id: userId, user: username }
        const deny = { action: 'deny_access', id: userId, user: username }

        const keyboard = Markup.inlineKeyboard([
            Markup.button.callback('üîπ –†–∞–∑—Ä–µ—à–∏—Ç—å', JSON.stringify(grant)),
            Markup.button.callback('üî∏ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å', JSON.stringify(deny))
        ]);

        if (!HasAccess(userId)) {
            await Bot.telegram.sendMessage(54355560, `‚ôªÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>${username}</b> –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø. –†–∞–∑—Ä–µ—à–∏—Ç—å?`, {
                parse_mode: 'HTML',
                reply_markup: keyboard.reply_markup
            })
        }

        LOG(username, 'Helpers/Permissions/PermissionsAccess')
    } catch (error) {
        LOG(username, 'Permissions/PermissionsAccess', error)
    }
}

//PermissionsAction
const PermissionsAction = async (ctx) => {
    const { username } = ctx.message.from
    try {
        const { action, id, user } = JSON.parse(ctx.callbackQuery.data);

        if (action === 'grant_access') {
            GrantAccess(id, user);
            await ctx.telegram.sendMessage(id, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω.', Markup.keyboard([
                ['üîπ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'],
            ]).resize().oneTime())

            LOG(username, 'Permissions/PermissionsAction', '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.')
        } else if (action === 'deny_access') {
            await ctx.telegram.sendMessage(id, 'üö´ –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.')
            LOG(username, 'Permissions/PermissionsAction', '–û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ.')
        }
    } catch (error) {
        LOG(username, 'Permissions/PermissionsAction', error)
    }
}

module.exports = { Permissions, PermissionsAdmin, PermissionsAction, PermissionsAccess }