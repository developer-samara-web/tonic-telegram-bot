//? SCENES | TONICPIXEL

//* Requires
const { LOG } = require('@helpers/base')
const { Scenes, Composer, Markup } = require('telegraf')
const { SetPixelMiddleware } = require('@middlewares/TonicMiddlewares')


//* START
const stageName = new Composer()
stageName.on('text', async (ctx) => {
    const { username } = ctx.message.from

    try {
        ctx.wizard.state.data = {}
        await ctx.replyWithHTML('<b>‚ôªÔ∏è –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∏–∫—Å–µ–ª—è –ø—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ —ç—Ç–∞–ø—ã.</b>\n\n1Ô∏è‚É£ <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏:</b>')

        LOG(username, 'Scenes/User/Tonic/Edits/Pixel/TonicPixelScene/StageName')
        return ctx.wizard.next()
    } catch (error) {
        LOG(username, 'Scenes/User/Tonic/Edits/Pixel/TonicPixelScene/StageName', error, ctx)
        return ctx.scene.leave()
    }
})
//* END


//* START
const stageEvent = new Composer()
stageEvent.on('text', async (ctx) => {
    const { data } = ctx.wizard.state
    const { username } = ctx.message.from

    try {
        data.name = ctx.message.text

        await ctx.replyWithHTML('3Ô∏è‚É£ <b>–£–∫–∞–∂–∏—Ç–µ event –ø–∏–∫—Å–µ–ª—è:</b> (–¢–æ–ª—å–∫–æ –¥–ª—è Facebook)',
            Markup.keyboard([
                ['Lead', 'Purchase'],
                ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
            ]).resize().oneTime())

        LOG(username, 'Scenes/User/Tonic/Edits/Pixel/TonicPixelScene/StageEvent')
        return ctx.wizard.next()
    } catch (error) {
        LOG(username, 'Scenes/User/Tonic/Edits/Pixel/TonicPixelScene/StageEvent', error, ctx)
        return ctx.scene.leave()
    }
})
//* END


//* START
const stagePixel = new Composer()
stagePixel.on('message', async (ctx) => {
    const { data } = ctx.wizard.state
    const { username } = ctx.message.from

    try {
        data.event = ctx.message.text
        await ctx.replyWithHTML('4Ô∏è‚É£ <b>–£–∫–∞–∂–∏—Ç–µ pixel_id:</b>')

        LOG(username, 'Scenes/User/Tonic/Edits/Pixel/TonicPixelScene/StagePixel')
        return ctx.wizard.next()
    } catch (error) {
        LOG(username, 'Scenes/User/Tonic/Edits/Pixel/TonicPixelScene/StagePixel', error, ctx)
        return ctx.scene.leave()
    }
})
//* END


//* START
const stageToken = new Composer()
stageToken.on('message', async (ctx) => {
    const { data } = ctx.wizard.state
    const { username } = ctx.message.from

    try {
        data.pixel = ctx.message.text
        await ctx.replyWithHTML('5Ô∏è‚É£ <b>–£–∫–∞–∂–∏—Ç–µ access_token:</b>')

        LOG(username, 'Scenes/User/Tonic/Edits/Pixel/TonicPixelScene/StageToken')
        return ctx.wizard.next()
    } catch (error) {
        LOG(username, 'Scenes/User/Tonic/Edits/Pixel/TonicPixelScene/StageToken', error, ctx)
        return ctx.scene.leave()
    }
})
//* END


//* START
const stageResult = new Composer()
stageResult.on('message', async (ctx) => {
    const { data } = ctx.wizard.state
    const { username } = ctx.message.from

    try {
        data.token = ctx.message.text
        const { message_id } = await ctx.replyWithHTML(`‚ôªÔ∏è <b>–ò–¥—ë—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∏–∫—Å–µ–ª—è...</b>`)
        const message = await SetPixelMiddleware(ctx, data)
        await ctx.deleteMessage(message_id);

        if (message) {
            await ctx.replyWithHTML(`‚úÖ <b>–ü–∏–∫—Å–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>`)
        } else {
            await ctx.replyWithHTML(`üö´ <b>–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∏–∫—Å–µ–ª—è.</b>`)
        }

        LOG(username, 'Scenes/User/Tonic/Edits/Pixel/TonicPixelScene/StageResult')
    } catch (error) {
        LOG(username, 'Scenes/User/Tonic/Edits/Pixel/TonicPixelScene/StageResult', error, ctx)
        return ctx.scene.leave()
    } finally {
        return ctx.scene.enter('tonic-edits')
    }
})
//* END


const TonicPixelScene = new Scenes.WizardScene('TonicPixelWizard', stageName, stageEvent, stagePixel, stageToken, stageResult)
module.exports = TonicPixelScene