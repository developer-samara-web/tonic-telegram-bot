//? MIDDLEWARES | TONIC

//* Requires
const { LOG } = require('@helpers/base')


//* START - StatusMessage
const StatusMessage = async (ctx, json, { Keywords }, { result }) => {
    const { username } = ctx.message.from
    try {

        LOG(username, 'Messages/Tonic/StatusMessage')
        return json.status === 'active' ?
            `‚úÖ <b>ID:${json['0'].id} | ${json['0'].name}</b>\n---------------------------------------------------------------\n<b>Offer:</b> ${json['0'].offer}\n<b>URL:</b> https://${json['0'].link}\n<b>Status:</b> ${json.status}\nCallbacks: ${result && result.view && result.click ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' : '–ù–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã'}\n–ö–ª—é—á–∏: ${Keywords ? Keywords : '–ù–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã'}\n---------------------------------------------------------------` :
            json.status === 'pending' ?
                `üöº <b>ID:${json['0'].id} | ${json['0'].name}</b>\n---------------------------------------------------------------\n<b>Status:</b> ${json.status}\n---------------------------------------------------------------` :
                undefined;
    } catch (error) {
        LOG(username, 'Messages/Tonic/StatusMessage', error)
        return false
    }
}
//* END - StatusMessage


//* START - StatisticsMessage
const StatisticsMessage = async (ctx, json) => {
    const { username } = ctx.message.from
    const MAX_MESSAGE_LENGTH = 4096; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    const MAX_ITEMS_PER_MESSAGE = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

    try {
        let messageParts = [];

        for (let i = 0; i < json.length; i += MAX_ITEMS_PER_MESSAGE) {
            const currentSlice = json.slice(i, i + MAX_ITEMS_PER_MESSAGE);
            let currentMessage = '';

            for (const item of currentSlice) {
                const stats = `‚ùáÔ∏è <b>${item.campaign_name}</b>\n---------------------------------------------------------------\n<b>Revenue: </b>${item.revenueUsd}$ | <b>Clicks: </b>${item.clicks} | <b>CPC: </b>${item.CPC}\n---------------------------------------------------------------\n\n`;
                if (currentMessage.length + stats.length <= MAX_MESSAGE_LENGTH) {
                    currentMessage += stats;
                } else {
                    messageParts.push(currentMessage);
                    currentMessage = stats;
                }
            }
            messageParts.push(currentMessage);
        }

        LOG(username, 'Messages/Tonic/StatisticsMessage');
        return messageParts;
    } catch (error) {
        LOG(username, 'Messages/Tonic/StatisticsMessage', error);
        return false
    }
}
//* END - StatisticsMessage


//* START - CompanyMessage
const CompanyMessage = async (ctx, json) => {
    const { username } = ctx.message.from
    try {
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const overallStats = json.overall;
        let message = `‚ùáÔ∏è <b>${overallStats.campaign_name}</b>\n---------------------------------------------------------------\n<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n---------------------------------------------------------------\n<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤: </b>${overallStats.totalClicks}\n<b>–û–±—â–∏–π –¥–æ—Ö–æ–¥: </b>${parseFloat(overallStats.totalRevenueUsd).toFixed(2)}$\n<b>–û–±—â–∏–π CPC: </b>${overallStats.totalCPC}$\n---------------------------------------------------------------\n\n`;

        // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º
        const dateStats = json.byDate.map(item =>
            `üìÖ <b>–î–∞—Ç–∞: ${item.date}</b>\n---------------------------------------------------------------\n<b>–î–æ—Ö–æ–¥: </b>${parseFloat(item.revenueUsd).toFixed(2)}$ | <b>–ö–ª–∏–∫–∏: </b>${item.clicks} | <b>CPC: </b>${item.CPC}$\n---------------------------------------------------------------\n\n`
        ).join('');

        if (json.overall.totalClicks){
            LOG(username, 'Messages/Tonic/CompanyMessage');
            return message + dateStats;
        } else {
            return false
        }
    } catch (error) {
        LOG(username, 'Messages/Tonic/CompanyMessage', error);
        return false;
    }
}
//* END - CompanyMessage


//* START - KeywordMessage
const KeywordMessage = async (ctx, json) => {
    const { username } = ctx.message.from
    const MAX_MESSAGE_LENGTH = 4096; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    const MAX_ITEMS_PER_MESSAGE = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

    try {
        const company_name = json[0].campaign_name;
        let messageParts = [];

        for (let i = 0; i < json.length; i += MAX_ITEMS_PER_MESSAGE) {
            const currentSlice = json.slice(i, i + MAX_ITEMS_PER_MESSAGE);
            let currentMessage = `‚úÖ <b>${company_name}</b>\n\n`;

            for (const item of currentSlice) {
                const keywordMessage = `üîÖ<b>${item.keyword}</b>\n<b>Revenue: </b>${item.revenueUsd}$ | <b>Clicks: </b>${item.clicks} | <b>CPC: </b>${item.CPC}\n---------------------------------------------------------------\n`;

                if (currentMessage.length + keywordMessage.length <= MAX_MESSAGE_LENGTH) {
                    currentMessage += keywordMessage;
                } else {
                    messageParts.push(currentMessage);
                    currentMessage = keywordMessage;
                }
            }
            messageParts.push(currentMessage);
        }

        LOG(username, 'Messages/Tonic/KeywordMessage');
        return messageParts;
    } catch (error) {
        LOG(username, 'Messages/Tonic/KeywordMessage', error);
        return false
    }
}
//* END - KeywordMessage


//* START - CreateMessage
const CreateMessage = async (ctx, json) => {
    const { username } = ctx.message.from
    try {
        LOG(username, 'Messages/Tonic/CreateMessage');
        return `‚úÖ <b>–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞</>.`
    } catch (error) {
        LOG(username, 'Messages/Tonic/CreateMessage', error)
        return false
    }
}
//* END - CreateMessage


module.exports = { 
    StatusMessage, 
    StatisticsMessage, 
    KeywordMessage, 
    CreateMessage, 
    CompanyMessage 
}